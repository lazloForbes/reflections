What happens when you initialize a repository? Why do you need to do it?

- An directory .git is created where the computer saves all of my commits.
- Good question!

New commands I've learned:

- "git init" - create a repository
- "git add filename" - works on the staging area
- "git status" - works on the staging area

How is the staging area different from the working directory and the 
repository? What value do you think it offers?

- You put thing in the staging area before you make a commit. Files in the
- staging area will be commited when you commit.
- The working directory is a single checkout of one version of the project.
- These files are pulled out of the compressed database in the Git directory
- and placed on disk for you to use or modify.
- It probably adds the value of not commiting to many files. in each version.
- This would save a lot of discspace instead of saving multiple version of
- all possible files.

New commands:

- "git diff" - gives the difference of the files in the staging area and the 
- working directory
- "git diff --staged" - gives the difference of the files in the staging area
- and the repository
- "git reset --hard" - removes changes on the working directory that has not
- been added to the staging area. (Be careful when you use this to not lose
- and of your work)

How can you use the staging area to make sure you have one commit per logical 
change?

- By only adding files that have anything to do with the logical change.
- By this I mean files that are affected by the change should be added, no
- other files.

New commands:

- "git branch" - gives all the possible branches
- "git branch branchName" - creates a new branch with the name branchName

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

- If I want to experiment with my code but don't want to manipulate the working
- version of the code. Another possibility is if I want to make a bigger update
- of the code, like go from 1.0.x to 1.1.x. Yet another possibility is i I want
- to make a version in another language or something like that.
- Branches would help me in a way the codes apart so that I don't have to look
- through all of my commits.

- Remote Branch - Someone else has created it.

- Think of commits as having parents.

- Lets say I am on a branch with the commits a - b - c, where c is the most
- recent and a is the oldest. If I now checkout a and then makes a change to it
- and then makes a commit, this will not affect b or c. It will create a new
- branch-less commit. If I want to save this so I don't lose it I have to
- either save the commit-id or I have to create a new branch:
- "git checkout -b newBranchName"

How do the diagrams help you visualize the branch structure?

- It helps me by visualising the commits that have been made on both branches.
- It is easy to see from where they don't match.
- "git log --graph --oneline branch1 branch2", --oneline is not necessary but
- it will make it easier to visualise the log.

New commands:

- "git show commitId" - Show the changes compare to the parent of the commit.
- "git branch -d branchName" - Delete the label of the branch, not the commits.
- "git merge branch1 branch2" - This will merge branch1 and branch2 and, if you
- have another branch checked-out (branch3), branch3. If you only want to merge
- branch1 and branch2 you first have to checkout one of them, the one which
- name you want the merged branch to have. Lets say yo checked-out branch1,
- then you type "git merge branch2" to merge branch1 and branch2.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

- When merging two branches we will in the future only have one branch. If we
- want we could delete the branch-label for the branch that was merge into the
- other branch.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

- The pros of automatic merging are that it is simple and does the job well.
- The pros of manual merging are that if we are two people that has made
- changes to the code, there won't be any conflicts in the future since Git
- signals these differences and makes us look at them.
- I can't accerly see any cons with either of them.

