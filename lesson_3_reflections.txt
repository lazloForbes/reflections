When would you want to use a remote repository rather than keeping all your 
work local?

- When I want to collaborate with other people and share my project. It is also
- a good way to backup the files.

New commands:

- "git push nameOfRemote(origin is common)" - use when I want to push files to
- GitHub.
- "git pull nameOfRemote(origin is commin) branchToPullTo" - use when I want to
- pull files from GitHub.

Why might you want to always pull changes manually rather than having Git 
automatically stay up-to-date with your remote repository?

- Because if I'm working on a project I maby don't want new code that could
- interfer with what I've done.

Describe the differences between forks, clones, and branches. When would you
use one instead of another?

- FORKS are clones made on GitHub. What this means is that if you are on GitHub
- and want to clone a repository from another user, you fork it and it will now
- be one of your repositories.
- CLONES are an copy of a repository that you have on your local computer.
- BRANCHES are a sidetracks you can use if you want to test out new idead but
- don't want to make changes to the working copy that are official.

New commands:

- "git fetch" - to get a local copy of the latest commit to the GitHub
- repository without makeing changes to local commits that has not been pushed
- to GitHub yet.
- "git pull origin master" == "git fetch origin" and then "git merge master
- origin/master"

About fast-forward merge:

- Fast-forward merge is possible when an commit is reachable from the other.
- "o--A--o--o--B", here A is reachable from B, therefore a fast-forward merge
- will take place.

What is the benefit of having a copy of the last known state of the remote
stored locally?

- Hopefully it will be possible to to a fast-forward merge instead of a
- fetch-merge.

